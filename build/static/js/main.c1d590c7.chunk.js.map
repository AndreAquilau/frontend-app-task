{"version":3,"sources":["config/env.ts","layout/styles.ts","components/Menu/styles.ts","components/Menu/index.tsx","components/Main/styles.ts","components/Form/styles.ts","components/Form/index.tsx","components/Lista/styles.ts","components/Lista/index.tsx","components/Main/index.tsx","layout/index.tsx","App.tsx","styles/GlobalStyles.ts","serviceWorker.ts","index.tsx"],"names":["config","path","resolve","__dirname","Container","styled","div","header","Menu","className","Form","action","type","Lista","props","elJSX","tasks","map","obj","console","log","estado","key","id","descricao","React","Children","child","cloneElement","Main","state","this","axios","get","baseURL","then","res","setState","data","catch","err","Component","Layout","App","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0IAAA,+BAGAA,iBAAO,CACLC,KAAMC,kBAAQC,EAAW,KAAM,KAAM,Y,yUCFhC,IAAMC,EAAYC,IAAOC,IAAV,K,8eCAf,IAAMF,EAAYC,IAAOE,OAAV,KCCP,SAASC,IACtB,OACE,kBAAC,EAAD,CAAWC,UAAU,aACnB,yBAAKA,UAAU,QACb,4BACE,uC,gTCNH,IAAML,EAAYC,IAAOC,IAAV,K,6pBCAf,IAAMF,EAAYC,IAAOC,IAAV,K,OCEP,SAASI,IACtB,OACE,kBAAC,EAAD,KACE,0BAAMC,OAAO,IAAIF,UAAU,cACzB,2BAAOG,KAAK,SACZ,gCACE,kBAAC,IAAD,CAAkBH,UAAU,e,i/CCR/B,IAAML,EAAYC,IAAOC,IAAV,KCIP,SAASO,EAASC,GAC/B,IAAMC,EAAQD,EAAME,MAAMC,KAAI,SAACC,GAE7B,OADAC,QAAQC,IAAIF,EAAIG,QACXH,EAAIG,OAiBLH,EAAIG,OAEJ,wBAAIZ,UAAU,UAAUa,IAAKJ,EAAIK,IAC/B,4BAAKL,EAAIM,WACT,4BACE,4BAAQf,UAAU,QAAlB,WAEF,4BACE,4BAAQA,UAAU,SAChB,kBAAC,IAAD,CAAgBA,UAAU,sBATpC,EAfI,wBAAIA,UAAU,UAAUa,IAAKJ,EAAIK,IAC/B,4BAAKL,EAAIM,WACT,4BACE,4BAAQf,UAAU,QAChB,kBAAC,IAAD,CAAgBA,UAAU,eAG9B,4BACE,4BAAQA,UAAU,SAChB,kBAAC,IAAD,CAAgBA,UAAU,oBAuBtC,OACE,kBAAC,EAAD,KACE,gDACA,+BACE,+BACE,4BACE,+CACA,8CAGJ,+BACGgB,IAAMC,SAAST,IAAIF,GAAO,SAACY,GAC1B,OAAOF,IAAMG,aAAaD,S,qBCjDjBE,E,4MACnBC,MAAQ,CACNd,MAAO,I,uDAIP,OACE,kBAAC,EAAD,KACE,kBAACN,EAAD,MACA,kBAACG,EAAD,CAAOG,MAAOe,KAAKD,MAAMd,W,0CAKV,IAAD,OAClBgB,IACGC,IAAI,QAAS,CACZC,QAAS,2BAEVC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZrB,MAAOoB,EAAIE,KAAKA,UAGnBC,OAAM,SAACC,GAAD,OAASrB,QAAQC,IAAIoB,U,GAxBGC,aCFtB,SAASC,IACtB,OACE,kBAACtC,EAAD,KACE,kBAACI,EAAD,MACA,kBAAC,EAAD,OCGSmC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAACiC,EAAD,Q,+wCCJSE,kBAAf,KCUoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.c1d590c7.chunk.js","sourcesContent":["import { config } from 'dotenv';\nimport { resolve } from 'path';\n\nconfig({\n  path: resolve(__dirname, '..', '..', '.env'),\n});\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  width: 100%;\n  grid-auto-columns: auto;\n  grid-auto-rows: auto auto;\n  justify-content: center;\n  align-content: center;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.header`\n  background-color: #111111;\n  padding: 0.8% 3%;\n  width: 100vw;\n\n  .menu ul {\n    display: flex;\n  }\n\n  .menu li {\n    color: #fff;\n    font-family: sans-serif;\n    font-weight: 700;\n    font-size: 14px;\n    cursor: pointer;\n    background-color: #b10dc9;\n    padding: 0.5% 1%;\n    border-radius: 6px;\n    transition: all 0.9s ease-in-out;\n  }\n\n  .menu li:hover {\n    background-color: #85144b;\n  }\n`;\n","import React from 'react';\nimport { Container } from './styles';\n\nexport default function Menu(): JSX.Element {\n  return (\n    <Container className=\"cabecalho\">\n      <nav className=\"menu\">\n        <ul>\n          <li>Task</li>\n        </ul>\n      </nav>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 50%;\n  margin: 0 auto;\n  margin-top: 5%;\n  background-color: #111111;\n  display: grid;\n  justify-content: center;\n  align-content: center;\n  padding: 2% 4%;\n  border-radius: 6px;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  .formulario {\n    width: 45vw;\n    display: grid;\n    grid-template-columns: 90% 10%;\n    grid-column-gap: 6px;\n  }\n\n  input {\n    padding: 1.5%;\n  }\n\n  button {\n    display: grid;\n    align-content: center;\n    justify-content: center;\n    background-color: #b10dc9;\n    outline: none;\n    border: none;\n    border-radius: 6px;\n    transition: all 1.5s ease-in-out;\n  }\n\n  button:hover {\n    background-color: #85144b;\n    cursor: pointer;\n  }\n\n  .btn-add {\n    color: #fff;\n    font-size: 16px;\n  }\n\n  .btn-add:hover {\n    color: #f5f5f5;\n  }\n`;\n","import React from 'react';\nimport { Container } from './styles';\nimport { AiFillPlusCircle } from 'react-icons/ai';\n\nexport default function Form(): JSX.Element {\n  return (\n    <Container>\n      <form action=\"#\" className=\"formulario\">\n        <input type=\"text\" />\n        <button>\n          <AiFillPlusCircle className=\"btn-add\"></AiFillPlusCircle>\n        </button>\n      </form>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 3%;\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  border-radius: 6px;\n  padding: 1%;\n\n  h1 {\n    color: #111111;\n    font-size: 16px;\n    font-family: sans-serif;\n    font-weight: 700;\n    text-align: center;\n    padding: 3px;\n  }\n\n  tr {\n    width: 100%;\n    display: grid;\n    margin-top: 16px;\n    grid-template-columns: 80% 20%;\n    border-bottom: 1px solid #111111;\n    padding: 3px;\n  }\n\n  th {\n    color: #111111;\n    font-size: 14px;\n    font-family: sans-serif;\n    font-weight: 700;\n  }\n  .listRow {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 80% 10% 10%;\n  }\n\n  .save {\n    display: grid;\n    align-content: center;\n    justify-content: center;\n    background-color: #2ecc40;\n    outline: none;\n    border: none;\n    border-radius: 6px;\n    transition: all 1.5s ease-in-out;\n    cursor: pointer;\n  }\n\n  .btn-save {\n    color: #fff;\n    font-size: 16px;\n  }\n\n  .btn-save:hover {\n    color: #f5f5f5;\n  }\n\n  .close {\n    display: grid;\n    align-content: center;\n    justify-content: center;\n    background-color: #ff4136;\n    outline: none;\n    border: none;\n    border-radius: 6px;\n    transition: all 1.5s ease-in-out;\n    cursor: pointer;\n  }\n\n  .btn-close {\n    color: #fff;\n    font-size: 16px;\n  }\n\n  .btn-close:hover {\n    color: #f5f5f5;\n  }\n`;\n","import React, { Props as P } from 'react';\nimport { Container } from './styles';\nimport { AiOutlineCheck, AiOutlineClose } from 'react-icons/ai';\nexport interface Props<T> extends P<T> {\n  tasks: any[];\n}\nexport default function Lista<T>(props: Props<T>) {\n  const elJSX = props.tasks.map((obj: any) => {\n    console.log(obj.estado);\n    if (!obj.estado) {\n      return (\n        <tr className=\"listRow\" key={obj.id}>\n          <td>{obj.descricao}</td>\n          <td>\n            <button className=\"save\">\n              <AiOutlineCheck className=\"btn-save\"></AiOutlineCheck>\n            </button>\n          </td>\n          <td>\n            <button className=\"close\">\n              <AiOutlineClose className=\"btn-close\"></AiOutlineClose>\n            </button>\n          </td>\n        </tr>\n      );\n    }\n    if (obj.estado) {\n      return (\n        <tr className=\"listRow\" key={obj.id}>\n          <td>{obj.descricao}</td>\n          <td>\n            <button className=\"save\">editar</button>\n          </td>\n          <td>\n            <button className=\"close\">\n              <AiOutlineClose className=\"btn-close\"></AiOutlineClose>\n            </button>\n          </td>\n        </tr>\n      );\n    }\n  });\n\n  return (\n    <Container>\n      <h1>Lista de Tarefas</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Opções</th>\n          </tr>\n        </thead>\n        <tbody>\n          {React.Children.map(elJSX, (child) => {\n            return React.cloneElement(child as React.ReactElement);\n          })}\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import React, { Component, Props } from 'react';\nimport { Container } from './styles';\nimport Form from '../Form';\nimport Lista from '../Lista';\nimport axios from 'axios';\n\nexport default class Main<T> extends Component {\n  state = {\n    tasks: [],\n  };\n\n  render(): JSX.Element {\n    return (\n      <Container>\n        <Form></Form>\n        <Lista tasks={this.state.tasks}></Lista>\n      </Container>\n    );\n  }\n\n  componentDidMount() {\n    axios\n      .get('/task', {\n        baseURL: 'http://localhost:5000/',\n      })\n      .then((res) => {\n        this.setState({\n          tasks: res.data.data,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n}\n","import React from 'react';\nimport { Container } from './styles';\nimport Menu from '../components/Menu';\nimport Main from '../components/Main';\nexport default function Layout(): JSX.Element {\n  return (\n    <Container>\n      <Menu></Menu>\n      <Main></Main>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Layout from './layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout></Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n\n\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n* {\n  box-sizing: border-box;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n  line-height: 1;\n  background-color: #B10DC9;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './config/env';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyles from './styles/GlobalStyles';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles></GlobalStyles>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}