{"version":3,"sources":["config/env.ts","layout/styles.ts","components/Menu/styles.ts","components/Menu/index.tsx","components/Main/styles.ts","components/Form/styles.ts","components/Form/index.tsx","components/Lista/styles.ts","components/Lista/index.tsx","components/Main/index.tsx","layout/index.tsx","App.tsx","styles/GlobalStyles.ts","serviceWorker.ts","index.tsx"],"names":["config","path","resolve","__dirname","Container","styled","div","header","Menu","className","Form","action","type","Lista","props","elJSX","tasks","length","map","obj","console","log","estado","key","id","descricao","React","Children","child","cloneElement","Main","state","this","axios","get","baseURL","process","API_URL","then","res","setState","data","catch","err","Component","Layout","App","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0IAAA,+BAGAA,iBAAO,CACLC,KAAMC,kBAAQC,EAAW,KAAM,KAAM,Y,yUCFhC,IAAMC,EAAYC,IAAOC,IAAV,K,8eCAf,IAAMF,EAAYC,IAAOE,OAAV,KCCP,SAASC,IACtB,OACE,kBAAC,EAAD,CAAWC,UAAU,aACnB,yBAAKA,UAAU,QACb,4BACE,uC,gTCNH,IAAML,EAAYC,IAAOC,IAAV,K,6pBCAf,IAAMF,EAAYC,IAAOC,IAAV,K,OCEP,SAASI,IACtB,OACE,kBAAC,EAAD,KACE,0BAAMC,OAAO,IAAIF,UAAU,cACzB,2BAAOG,KAAK,SACZ,gCACE,kBAAC,IAAD,CAAkBH,UAAU,e,i/CCR/B,IAAML,EAAYC,IAAOC,IAAV,KCIP,SAASO,EAASC,GAC/B,IAAIC,EAsCJ,OArCID,EAAME,MAAMC,OAAS,IACvBF,EAAQD,EAAME,MAAME,KAAI,SAACC,GAEvB,OADAC,QAAQC,IAAIF,EAAIG,QACXH,EAAIG,OAiBLH,EAAIG,OAEJ,wBAAIb,UAAU,UAAUc,IAAKJ,EAAIK,IAC/B,4BAAKL,EAAIM,WACT,4BACE,4BAAQhB,UAAU,QAAlB,WAEF,4BACE,4BAAQA,UAAU,SAChB,kBAAC,IAAD,CAAgBA,UAAU,sBATpC,EAfI,wBAAIA,UAAU,UAAUc,IAAKJ,EAAIK,IAC/B,4BAAKL,EAAIM,WACT,4BACE,4BAAQhB,UAAU,QAChB,kBAAC,IAAD,CAAgBA,UAAU,eAG9B,4BACE,4BAAQA,UAAU,SAChB,kBAAC,IAAD,CAAgBA,UAAU,qBAwBtC,kBAAC,EAAD,KACE,gDACA,+BACE,+BACE,4BACE,+CACA,8CAGJ,+BACGiB,IAAMC,SAAST,IAAIH,GAAO,SAACa,GAC1B,OAAOF,IAAMG,aAAaD,S,qBCnDjBE,E,4MACnBC,MAAQ,CACNf,MAAO,I,uDAIP,OACE,kBAAC,EAAD,KACE,kBAACN,EAAD,MACA,kBAACG,EAAD,CAAOG,MAAOgB,KAAKD,MAAMf,W,0CAKV,IAAD,OAClBiB,IACGC,IAAI,QAAS,CACZC,QAASC,mHAAYC,UAEtBC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZxB,MAAOuB,EAAIE,KAAKA,UAGnBC,OAAM,SAACC,GAAD,OAASvB,QAAQC,IAAIsB,U,GAxBGC,aCFtB,SAASC,IACtB,OACE,kBAACzC,EAAD,KACE,kBAACI,EAAD,MACA,kBAAC,EAAD,OCGSsC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAACoC,EAAD,Q,+wCCJSE,kBAAf,KCUoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.5324e838.chunk.js","sourcesContent":["import { config } from 'dotenv';\r\nimport { resolve } from 'path';\r\n\r\nconfig({\r\n  path: resolve(__dirname, '..', '..', '.env'),\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  grid-auto-columns: auto;\r\n  grid-auto-rows: auto auto;\r\n  justify-content: center;\r\n  align-content: center;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n  background-color: #111111;\r\n  padding: 0.8% 3%;\r\n  width: 100vw;\r\n\r\n  .menu ul {\r\n    display: flex;\r\n  }\r\n\r\n  .menu li {\r\n    color: #fff;\r\n    font-family: sans-serif;\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    background-color: #b10dc9;\r\n    padding: 0.5% 1%;\r\n    border-radius: 6px;\r\n    transition: all 0.9s ease-in-out;\r\n  }\r\n\r\n  .menu li:hover {\r\n    background-color: #85144b;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Container } from './styles';\r\n\r\nexport default function Menu(): JSX.Element {\r\n  return (\r\n    <Container className=\"cabecalho\">\r\n      <nav className=\"menu\">\r\n        <ul>\r\n          <li>Task</li>\r\n        </ul>\r\n      </nav>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 50%;\r\n  margin: 0 auto;\r\n  margin-top: 5%;\r\n  background-color: #111111;\r\n  display: grid;\r\n  justify-content: center;\r\n  align-content: center;\r\n  padding: 2% 4%;\r\n  border-radius: 6px;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  .formulario {\r\n    width: 45vw;\r\n    display: grid;\r\n    grid-template-columns: 90% 10%;\r\n    grid-column-gap: 6px;\r\n  }\r\n\r\n  input {\r\n    padding: 1.5%;\r\n  }\r\n\r\n  button {\r\n    display: grid;\r\n    align-content: center;\r\n    justify-content: center;\r\n    background-color: #b10dc9;\r\n    outline: none;\r\n    border: none;\r\n    border-radius: 6px;\r\n    transition: all 1.5s ease-in-out;\r\n  }\r\n\r\n  button:hover {\r\n    background-color: #85144b;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn-add {\r\n    color: #fff;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .btn-add:hover {\r\n    color: #f5f5f5;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Container } from './styles';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\n\r\nexport default function Form(): JSX.Element {\r\n  return (\r\n    <Container>\r\n      <form action=\"#\" className=\"formulario\">\r\n        <input type=\"text\" />\r\n        <button>\r\n          <AiFillPlusCircle className=\"btn-add\"></AiFillPlusCircle>\r\n        </button>\r\n      </form>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 3%;\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-content: center;\r\n  border-radius: 6px;\r\n  padding: 1%;\r\n\r\n  h1 {\r\n    color: #111111;\r\n    font-size: 16px;\r\n    font-family: sans-serif;\r\n    font-weight: 700;\r\n    text-align: center;\r\n    padding: 3px;\r\n  }\r\n\r\n  tr {\r\n    width: 100%;\r\n    display: grid;\r\n    margin-top: 16px;\r\n    grid-template-columns: 80% 20%;\r\n    border-bottom: 1px solid #111111;\r\n    padding: 3px;\r\n  }\r\n\r\n  th {\r\n    color: #111111;\r\n    font-size: 14px;\r\n    font-family: sans-serif;\r\n    font-weight: 700;\r\n  }\r\n  .listRow {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: 80% 10% 10%;\r\n  }\r\n\r\n  .save {\r\n    display: grid;\r\n    align-content: center;\r\n    justify-content: center;\r\n    background-color: #2ecc40;\r\n    outline: none;\r\n    border: none;\r\n    border-radius: 6px;\r\n    transition: all 1.5s ease-in-out;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn-save {\r\n    color: #fff;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .btn-save:hover {\r\n    color: #f5f5f5;\r\n  }\r\n\r\n  .close {\r\n    display: grid;\r\n    align-content: center;\r\n    justify-content: center;\r\n    background-color: #ff4136;\r\n    outline: none;\r\n    border: none;\r\n    border-radius: 6px;\r\n    transition: all 1.5s ease-in-out;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn-close {\r\n    color: #fff;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .btn-close:hover {\r\n    color: #f5f5f5;\r\n  }\r\n`;\r\n","import React, { Props as P } from 'react';\nimport { Container } from './styles';\nimport { AiOutlineCheck, AiOutlineClose } from 'react-icons/ai';\nexport interface Props<T> extends P<T> {\n  tasks: any[];\n}\nexport default function Lista<T>(props: Props<T>) {\n  let elJSX;\n  if (props.tasks.length > 0) {\n    elJSX = props.tasks.map((obj: any) => {\n      console.log(obj.estado);\n      if (!obj.estado) {\n        return (\n          <tr className=\"listRow\" key={obj.id}>\n            <td>{obj.descricao}</td>\n            <td>\n              <button className=\"save\">\n                <AiOutlineCheck className=\"btn-save\"></AiOutlineCheck>\n              </button>\n            </td>\n            <td>\n              <button className=\"close\">\n                <AiOutlineClose className=\"btn-close\"></AiOutlineClose>\n              </button>\n            </td>\n          </tr>\n        );\n      }\n      if (obj.estado) {\n        return (\n          <tr className=\"listRow\" key={obj.id}>\n            <td>{obj.descricao}</td>\n            <td>\n              <button className=\"save\">editar</button>\n            </td>\n            <td>\n              <button className=\"close\">\n                <AiOutlineClose className=\"btn-close\"></AiOutlineClose>\n              </button>\n            </td>\n          </tr>\n        );\n      }\n    });\n  }\n  return (\n    <Container>\n      <h1>Lista de Tarefas</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Opções</th>\n          </tr>\n        </thead>\n        <tbody>\n          {React.Children.map(elJSX, (child) => {\n            return React.cloneElement(child as React.ReactElement);\n          })}\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import React, { Component, Props } from 'react';\nimport { Container } from './styles';\nimport Form from '../Form';\nimport Lista from '../Lista';\nimport axios from 'axios';\n\nexport default class Main<T> extends Component {\n  state = {\n    tasks: [],\n  };\n\n  render(): JSX.Element {\n    return (\n      <Container>\n        <Form></Form>\n        <Lista tasks={this.state.tasks}></Lista>\n      </Container>\n    );\n  }\n\n  componentDidMount() {\n    axios\n      .get('/task', {\n        baseURL: process.env.API_URL,\n      })\n      .then((res) => {\n        this.setState({\n          tasks: res.data.data,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n}\n","import React from 'react';\r\nimport { Container } from './styles';\r\nimport Menu from '../components/Menu';\r\nimport Main from '../components/Main';\r\nexport default function Layout(): JSX.Element {\r\n  return (\r\n    <Container>\r\n      <Menu></Menu>\r\n      <Main></Main>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Layout from './layout';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout></Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n\r\n\r\n/* http://meyerweb.com/eric/tools/css/reset/\r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n  line-height: 1;\r\n  background-color: #B10DC9;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\n`;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import './config/env';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport GlobalStyles from './styles/GlobalStyles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyles></GlobalStyles>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}